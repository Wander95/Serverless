# ./serverless.yml
service: serverless-adoring-virus-product-lambda

plugins:
  - serverless-dotenv-plugin
  # - serverless-esbuild # used for compiling/packaging the Typescript code
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-offline # used for local execution

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  # * environment variables
  environment:
    PRODUCT_TABLE: product_table
    STOCK_TABLE: stock_table 
    AUTHORIZATION_TOKEN: ${env:AUTHORIZATION_TOKEN}
  # * http configuration
  httpApi:
    name: serverless-adoring-virus-lambda-http
    cors: true
    # authorizers:
    #   customAuthorizer:
    #     type: request
    #     functionName: authorizer_function
    #     name: custom_authorizer_function
        # identitySource:
        #   - $request.header.Authorization # this is ignored by serverless-offline but will default to the Authorization header anyway

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCT_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.STOCK_TABLE}"

package:
  individually: true

functions:
  authorizer_function:
    handler: src/functions/authorizer/authorizer.handler
    description: ${self:service} authorizer
    name: authorizer_function
    
  get_all_products:
    name: get_all_products_function
    handler: src/functions/get-all/get-all.handler
    events:
      - http:
          path: /api/products
          method: GET
          authorizer: authorizer_function
            # type: request
          #   resultTtlInSeconds: 30
          #   identitySource: method.request.header.Authorization
          #   type: token

  get_product_by_id:
    name: get_product_by_id_function
    handler: src/functions/get-by-id/get-by-id.handler
    events:
      - http:
          path: /api/products/{id}
          method: GET

  create_product:
    name: create_product_function
    handler: src/functions/create/create.handler
    events:
      - http:
          path: /api/products
          method: POST


resources:
  - ${file(resources/stock-table.yml)}
  - ${file(resources/product-table.yml)}
